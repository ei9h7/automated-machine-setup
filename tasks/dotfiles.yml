---
- name: Ensure dotfiles repository is cloned locally.
  git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_repo_local_destination }}"
    version: "{{ dotfiles_repo_version }}"
    accept_hostkey: "{{ dotfiles_repo_accept_hostkey }}"
  become: false

- name: Ensure git config directory exists
  file:
    path: "{{ dotfiles_home }}/.config/git"
    state: directory

- name: Decrypt git config template
  local_action: "shell {{ view_encrypted_file_cmd }} {{ dotfiles_repo_local_destination }}/.config/git/config.enc > {{ dotfiles_repo_local_destination }}/.config/git/config"
  changed_when: False

- name: Ensure unencrypted git config is ignored in gitignore
  lineinfile:
    path: "{{ dotfiles_repo_local_destination }}/.gitignore"
    line: ".config/git/config"
  become: false
   
#- name: Deploy template
#  template:
#    src="{{ dotfiles_repo_local_destination }}/.config/git/config
#    dest="{{ dotfiles_home }}/.config/git/config

#- name: Remove decrypted templa  
#  local_action: "file path={{ dotfiles_repo_local_destination }}/.config/git/config state=absent"
#  changed_when: False

- name: Ensure all configured dotfiles are links.
  command: "ls -F {{ dotfiles_home }}/{{ item }}"
  register: existing_dotfile_info
  failed_when: false
  check_mode: false
  changed_when: false
  with_items: "{{ dotfiles_files }}"

- name: Remove existing dotfiles file if a replacement is being linked.
  file:
    path: "{{ dotfiles_home }}/{{ dotfiles_files[item.0] }}"
    state: absent
  when: "'@' not in item.1.stdout"
  with_indexed_items: "{{ existing_dotfile_info.results }}"
  become: true

- name: Link dotfiles into home folder.
  file:
    src: "{{ dotfiles_repo_local_destination }}/{{ item }}"
    dest: "{{ dotfiles_home }}/{{ item }}"
    state: link
  become: false
  with_items: "{{ dotfiles_files }}"
