---
downloads: "{{ lookup('env', 'HOME') }}/.ansible-downloads/"

# Ansible Vault Secrets File
secrets_vault: "secrets.yml"

# Configure dotfiles for this system
configure_dotfiles: true
dotfiles_repo: "https://github.com/ei9h7/dotfiles.git"
dotfiles_repo_version: "debian-linux"
dotfiles_repo_accept_hostkey: true
dotfiles_repo_local_destination: "{{ lookup('env', 'HOME') }}/repos/dotfiles"
dotfiles_home: "{{ lookup('env', 'HOME') }}"
dotfiles_files:
  - .config/htop
  - .config/neofetch
  - .gitconfig
  - .gnupg/gpg-agent.conf
  - .bash_profile
  - .bashrc
  - .gitignore
  - .gitmodules
  - .hyper.js
  - .inputrc
  - .nanorc
  - .profile
  - .screenrc
  - .tmux.conf
  - .vimrc
  - .zshrc
  - .zshenv

# Edit sudoers file with visudo
configure_sudoers: true
sudoers_folder: "/etc/sudoers.d"
sudoers_custom_config: |
  # Allow users in sudo group to use sudo with no password (linux).
  %sudo ALL=(ALL) NOPASSWD: ALL

# Customize OS
configure_linux: false
linux_script: "{{ dotfiles_repo_local_destination }}/.linux-defaults --no-restart"

# Set default shell (choose only one)
set_zsh: false
set_bash: true

# Set 'true' to configure homebrew packages  
configure_homebrew: false
homebrew_repo: "https://github.com/Homebrew/brew"
homebrew_prefix: "/home/linuxbrew/.linuxbrew"
homebrew_install_path: "{{ homebrew_prefix }}/Homebrew"
homebrew_brew_bin_path: "{{ homebrew_prefix }}/bin"
homebrew_upgrade_all_packages: false
homebrew_use_brewfile: false
homebrew_brewfile_dir: "$DOTFILES"
homebrew_clear_cache: false
homebrew_folders_additional: []
homebrew_installed_packages: []
  # Example:
  # - ansible # Installed via Pip.
  # - { name: yubikey-agent, install_options: "restart_service: true" }
homebrew_uninstalled_packages: []
homebrew_taps: []

# Set 'true' to configure apt packages
configure_apt: true
apt_installed_packages:
    # - ansible #installed via pip
    - bash
    - bash-completion
    - btrfs-progs
    - build-essential
    - bzip2
    - ca-certificates
    - coreutils
    - cryptsetup
    - curl
    - diffutils
    - dirmngr
    - dracut
    - e2fsprogs
    - eatmydata
    - file
    - findutils
    - gcc
    - git
    - gnupg2
    - gnupg-agent
    - gpg
    - gzip
    - hcxtools
    - hfsplus
    - hfsutils
    - hopenpgp-tools
    - htop
    - libpam-yubico
    - mbpfan
    - neovim
    - ntfs-3g
    - pcscd
    - perl
    - pinentry-curses
    - python3
    - python-yubico-tools    
    - rng-tools5
    - rclone
    - rsync
    - scdaemon
    - snapd
    - tar
    - vim-common
    - vscodium
    - wget
    - ykcs11
    - ykls
    - yubico-piv-tool
    - yubikey-personalization
    - yubioath-desktop
    - zsh
    - zsh-autocomplete
    - zsh-autosuggestions
    - zsh-syntax-highlighting
apt_removed_packages: []
apt_update_cache: true
apt_cache_time: 3600
# Set 'true' to autoclean and autoremove
apt_autoclean: true
apt_autoremove: false

# Set 'true' to configure apt packages
configure_snap: true
snap_installed_packages_classic:
  - gitkraken
  - powershell
snap_installed_packages:
  - nordpass
  - nordvpn-electron
snap_removed_packages: []

# Set to 'true' to configure the terminal theme etc
configure_terminal: false

# Set 'true' to configure nvm
nvm_node_versioning: true
# Uninstall NVM
uninstall: false
# NVM source location - i.e. you host your own fork
nvm_source: "https://github.com/nvm-sh/nvm.git"
# Set the specific version of Node.js to install ("4.8.0", "6.11.0").
# use lts for latest Long Term Release
# Version numbers from Nodesource: https://github.com/nodesource/distributions
nodejs_version:
  - lts
  - node
nodejs_default_version: "lts"
# NVM has a bash autocomplete functionality for when a user logs into a machine. Cool feature
# but only works when a human logs into said machine. More of a convienence method for this role
autocomplete: false
# NVM will automatically alias First Run version as default which is more than likely
# what people will use this for This will allow for installation/upgrade of multiple versions on an existing
# machine for the scenarios described in
# https://github.com/morgangraphics/ansible-role-nvm/pull/7#issuecomment-481423099
default: false
# The next 3 options only apply to wget and curl - If you don't know what you're doing
# you are fine to leave these alone.
#
# NVM Default directory
# NVM will, by default, install the .nvm directory in the home directory of the user e.g. /home/vagrant/.nvm
# You can override the installation directory by changing this variable e.g. /opt/nvm to put it into a
# global space (meaning not tied to a specific user account) if you wanted. This variable will respect
# Ansible substitution variables e.g. nvm_dir: "{{ansible_env.HOME}}/.nvm"
nvm_dir: "{{ ansible_env.HOME }}/.nvm"
# AdHoc NVM Commands
nvm_commands:
  - use "{{ nodejs_default_version }}"
# Options are wget, curl, git
# Git :default dest: is the same as nvm_profile below.
nvm_install: "git"
# The location of the SHELL profile that will source the nvm command from. There are two potential contexts to consider,
# globally, meaning everyone who logs in will have access to nvm (which may or may not what you really want)
# e.g /etc/bash.bashrc, /etc/profile, etc.
#
#  OR
#
# On a per user basis tied to a specific user account e.g. /home/vagrant/.bashrc
# This role will create the appropriate profile file if it doesn't already exist.
#
# If you specify nvm_profile: "/home/node-user/.bashrc" explicity and the node-user is not a real
# user on the box, then nvm will not work as you expect. become_user and nvm_profile path are
# symbiotic
#
# PLEASE BE AWARE OF THE LIMITATIONS OF EXPLICITLY DECLARING .profile OR .bash_profile FILES ON UBUNTU SYSTEMS
# https://askubuntu.com/a/969923 Explains in detail
# https://kb.iu.edu/d/abdy Shows options for each shell type
#
# NVM Profile location Options are:
#
# CSH: /etc/csh.cshrc, .cshrc
# TSCH: /etc/csh.cshrc, .tcshrc, .cshrc
# BASH: .bashrc
# ZSH: .zshrc
#
nvm_profile: "{{ dotfiles_repo_local_destination }}/.exports"
nvm_shell: bash
# nvm installed global package list
nvm_node_global_packages:
  - name: yarn
  - name: nbd
  - name: tldr
  - name: fkill
  - name: vtop
  - name: create-react-app
  - name: react-native-cli
  - name: prettier
  - name: eslint
  - name: typescript

# Install packages from other package managers.
# Note: Make sure the required package managers are installed.
composer_packages: []
gem_packages: []
npm_packages:
  - name: yarn
    state: latest
  - name: nbd
    state: latest
  - name: tldr
    state: latest
  - name: fkill
    state: latest
  - name: vtop
    state: latest
  - name: create-react-app
    state: latest
  - name: react-native-cli
    state: latest
  - name: prettier
    state: latest
  - name: eslint
    state: latest
  - name: typescript
    state: latest
pip_packages: []

# configure yubikey
configure_yubikey: true

# Set to 'true' to configure Visual Studio Code
configure_vsc: true
vsc_extensions:
  - mhutchie.git-graph
  - github.vscode-pull-request-github
  - eamodio.gitlens
  - hoovercj.vscode-power-mode
  - ms-python.python
  - juanblanco.solidity
  - robbowen.synthwave-vscode
  - redhat.vscode-yaml
  - ms-vscode.powershell
vsc_settings_overwrite: yes
vsc_keys_overwrite: yes
vsc_custom_config: "{{ dotfiles_repo_local_destination }}/.config/vscode/settings.json"
vsc_custom_keys: "{{ dotfiles_repo_local_destination }}/.config/vscode/keybindings.json"

# Glob pattern to ansible task files to run after all other tasks are finished.
post_provision_tasks: []
