---
downloads: "{{ lookup('env', 'HOME') }}/.ansible-downloads/"

# Ansible Vault Secrets File
secrets_vault: "secrets.yml"

# Configure dotfiles for this system
configure_dotfiles: true
dotfiles_repo: "https://github.com/ei9h7/dotfiles.git"
dotfiles_repo_version: "master"
dotfiles_repo_accept_hostkey: true
dotfiles_repo_local_destination: "{{ lookup('env', 'HOME') }}/projects/dotfiles"
dotfiles_home: "{{ lookup('env', 'HOME') }}"
dotfiles_files:
  - .config/htop
  - .config/neofetch
  - .gitconfig
  - .gnupg/gpg-agent.conf
  - .bash_profile
  - .bashrc
  - .gitignore
  - .gitmodules
  - .hyper.js
  - .inputrc
  - .nanorc
  - .profile
  - .screenrc
  - .tmux.conf
  - .vimrc
  - .zshrc
  - .zshenv

# Edit sudoers file with visudo
configure_sudoers: false
sudoers_custom_config: []
  # Example:
  # sudoers_custom_config: |
  #   # Allow users in admin group to use sudo with no password. (macOS)
  #   %admin ALL=(ALL) NOPASSWD: ALL
  #   # Allow users in sudo group to use sudo with no password (linux).
  #   %sudo ALL=(ALL) NOPASSWD: ALL

# Customize OS
configure_osx: false
osx_script: "$DOTFILES/.macos-defaults --no-restart"
configure_linux: false
linux_script: "$DOTFILES/.linux-defaults --no-restart"

# Set default shell (choose only one)
set_zsh: false
set_bash: true

# Set 'true' to configure homebrew packages  
configure_homebrew: false
homebrew_repo: "https://github.com/Homebrew/brew"
homebrew_prefix: "{{ (ansible_machine == 'arm64') | ternary('/opt/homebrew', '/usr/local') }}"
  #  "{{ (ansible_machine == 'arm64') | ternary('/opt/homebrew', '/usr/local') }}" #macOS
  #  "/home/linuxbrew/.linuxbrew" # linux
homebrew_install_path: "{{ homebrew_prefix }}/Homebrew"
homebrew_brew_bin_path: "{{ homebrew_prefix }}/bin"
homebrew_upgrade_all_packages: false
homebrew_cask_accept_external_apps: false
homebrew_use_brewfile: false
homebrew_brewfile_dir: "$DOTFILES"
homebrew_clear_cache: false
homebrew_folders_additional: []
homebrew_installed_packages: []
  # Example:
  # - ansible # Installed via Pip.
  # - { name: yubikey-agent, install_options: "restart_service: true" }
homebrew_uninstalled_packages: []
homebrew_taps: []
homebrew_cask_appdir: "/Applications"
homebrew_cask_apps: []
homebrew_cask_uninstalled_apps: []

# Set 'true' to configure apt packages
configure_apt: false
apt_installed_packages: []
  # Example:
  # - ansible
apt_removed_packages: []
apt_update_cache: true
apt_cache_time: 3600
# Set 'true' to autoclean and autoremove
apt_autoclean: true
apt_autoremove: false

# Set to 'true' to configure the terminal theme etc
configure_terminal: true

# Set to 'true' to configure the Dock via dockutil.
configure_dock:  false
dockitems_remove: []
dockitems_persist: []
  # Example:  
  # - name: "MacVim"
  #   path: "/Applications/MacVim.app/"
  #   pos: 1

# Set 'true' to configure Apple App Store
configure_macstore: false
mas_installed_apps: []
  # Example:
  # - { id: 696977615, name: "Capo" }
# mas_email: ""
# mas_password: "" # in secrets.yml which is encrypted with ansible vault
mas_upgrade_all_apps: false
mas_signin_dialog: false

# Install packages from other package managers.
# Note: Make sure the required package managers are installed.
composer_packages: []
gem_packages: []
  # Example:
  # - name: colorls
  #   state: latest
npm_packages: []
pip_packages: []

# configure yubikey
configure_yubikey: false

# Set to 'true' to configure Visual Studio Code
configure_vsc: false
vsc_extensions: []
  # Example:
  # - robbowen.synthwave-vscode
vsc_settings_overwrite: no
vsc_keys_overwrite: no
vsc_custom_config: "$DOTFILES/.config/vscode/settings.json"
vsc_custom_keys: "$DOTFILES/.config/vscode/keybindings.json"

# Glob pattern to ansible task files to run after all other tasks are finished.
post_provision_tasks: []
